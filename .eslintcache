[{"/Users/ueno/dev/repository/react-firebase-storage/src/auth/PrivateRoute.tsx":"1","/Users/ueno/dev/repository/react-firebase-storage/src/auth/Login.tsx":"2","/Users/ueno/dev/repository/react-firebase-storage/src/components/Home.tsx":"3","/Users/ueno/dev/repository/react-firebase-storage/src/auth/Signup.tsx":"4","/Users/ueno/dev/repository/react-firebase-storage/src/auth/AuthProvider.tsx":"5","/Users/ueno/dev/repository/react-firebase-storage/src/App.tsx":"6","/Users/ueno/dev/repository/react-firebase-storage/src/base.ts":"7","/Users/ueno/dev/repository/react-firebase-storage/src/index.tsx":"8","/Users/ueno/dev/repository/react-firebase-storage/src/components/FileUpload.tsx":"9","/Users/ueno/dev/repository/react-firebase-storage/src/components/CustomModal.tsx":"10"},{"size":457,"mtime":1609319697764,"results":"11","hashOfConfig":"12"},{"size":1496,"mtime":1609320526967,"results":"13","hashOfConfig":"12"},{"size":902,"mtime":1609674097102,"results":"14","hashOfConfig":"12"},{"size":1504,"mtime":1609319633511,"results":"15","hashOfConfig":"12"},{"size":1626,"mtime":1609319641221,"results":"16","hashOfConfig":"12"},{"size":642,"mtime":1609320514773,"results":"17","hashOfConfig":"12"},{"size":403,"mtime":1608725899708,"results":"18","hashOfConfig":"12"},{"size":197,"mtime":1608725899709,"results":"19","hashOfConfig":"12"},{"size":5033,"mtime":1609837873252,"results":"20","hashOfConfig":"12"},{"size":791,"mtime":1609728232195,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1s600yo",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"31"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/ueno/dev/repository/react-firebase-storage/src/auth/PrivateRoute.tsx",[],["45","46"],"/Users/ueno/dev/repository/react-firebase-storage/src/auth/Login.tsx",[],"/Users/ueno/dev/repository/react-firebase-storage/src/components/Home.tsx",[],"/Users/ueno/dev/repository/react-firebase-storage/src/auth/Signup.tsx",[],["47","48"],"/Users/ueno/dev/repository/react-firebase-storage/src/auth/AuthProvider.tsx",[],"/Users/ueno/dev/repository/react-firebase-storage/src/App.tsx",[],"/Users/ueno/dev/repository/react-firebase-storage/src/base.ts",[],"/Users/ueno/dev/repository/react-firebase-storage/src/index.tsx",[],"/Users/ueno/dev/repository/react-firebase-storage/src/components/FileUpload.tsx",["49","50"],"import React, { useState, useEffect, useCallback } from \"react\";\nimport * as firebase from \"firebase/app\";\nimport { useDropzone } from \"react-dropzone\";\nimport { app } from \"src/base\";\nimport { makeStyles, createStyles, Theme } from \"@material-ui/core/styles\";\nimport {\n  Button,\n  Grid,\n  GridList,\n  GridListTile,\n  Paper,\n  GridListTileBar,\n  CircularProgress,\n} from \"@material-ui/core\";\n\ntype MyFile = File & {\n  preview: string;\n};\n\nconst acceptFile = \"image/*\";\nconst maxFileSize = 1048576;\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      width: \"50em\",\n      display: \"flex\",\n    },\n    paper: {\n      padding: theme.spacing(2),\n      textAlign: \"center\",\n      \"& > *\": {\n        margin: theme.spacing(3),\n      },\n    },\n    dropzone: {\n      width: \"100%\",\n      height: 200,\n      boxSizing: \"border-box\",\n      borderWidth: 2,\n      borderColor: \"#666666\",\n      borderStyle: \"dashed\",\n      borderRadius: 5,\n      verticalAlign: \"top\",\n      textAlign: \"center\",\n    },\n    thumbsContainer: {\n      marginTop: 16,\n    },\n    gridList: {\n      width: \"100%\",\n      height: 450,\n      // Promote the list into his own layer on Chrome. This cost memory but helps keeping high FPS.\n      transform: \"translateZ(0)\",\n    },\n    titleBar: {\n      background:\n        \"linear-gradient(to bottom, rgba(0,0,0,0.7) 0%, \" +\n        \"rgba(0,0,0,0.3) 70%, rgba(0,0,0,0) 100%)\",\n    },\n    upButton: {\n      color: \"secondary\",\n      margin: theme.spacing(3),\n    },\n    circular: {\n      textAlign: \"center\",\n    },\n  })\n);\n\nconst FileUpload = () => {\n  const [files, setFiles] = useState<MyFile[]>([]);\n  const [uploading, setUploading] = useState(false);\n  const [progress, setProgress] = useState(0);\n\n  const classes = useStyles();\n\n  const onDrop = useCallback((acceptedFiles: File[]) => {\n    setFiles(\n      acceptedFiles.map((file) =>\n        Object.assign(file, { preview: URL.createObjectURL(file) })\n      )\n    );\n  }, []);\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: acceptFile,\n    minSize: 0,\n    maxSize: maxFileSize,\n  });\n\n  const onUpload = async () => {\n    setUploading(true);\n    setProgress(0);\n\n    function uploadImageAsPromise(file: MyFile) {\n      const fileName = file.name;\n      var storageRef = app\n        .storage()\n        .ref()\n        .child(\"users/common/\" + fileName);\n\n      return new Promise(function (resolve, reject) {\n        const task = storageRef.put(file);\n\n        task.on(\n          firebase.default.storage.TaskEvent.STATE_CHANGED,\n          function progress(snapshot) {},\n          function error(err) {\n            reject(err);\n          },\n          function complete() {\n            task.then((snapshot) => {\n              resolve(snapshot.ref.getDownloadURL());\n            });\n          }\n        );\n      })\n        .then((downloadURL) => {\n          setProgress((oldProgress) => oldProgress + 1);\n          return downloadURL;\n        })\n        .catch(() => {\n          console.log(\"Error:uploadImageAsPromise\");\n        });\n    }\n\n    const result = await Promise.all(\n      files.map((file) => {\n        return uploadImageAsPromise(file);\n      })\n    );\n\n    setUploading(false);\n    setProgress(0);\n    setFiles([]);\n\n    alert(\"送信されました\");\n  };\n\n  if (uploading) {\n    const percent = Math.round((progress / files.length) * 100);\n    return (\n      <Grid container className={classes.root} spacing={3} justify=\"center\">\n        <Grid item xs={6}>\n          <Paper variant=\"outlined\" elevation={3} className={classes.paper}>\n            <CircularProgress\n              className={classes.circular}\n              variant=\"determinate\"\n              value={percent}\n            />\n          </Paper>\n        </Grid>\n      </Grid>\n    );\n  }\n  const tileCols = 3;\n\n  const thumbs = files.map((file, index) => (\n    <GridListTile key={file.preview} rows={1}>\n      <img src={file.preview} alt={file.name} />\n      <GridListTileBar title={file.name} subtitle={file.size} />\n    </GridListTile>\n  ));\n\n  const isDisabledButton = files.length === 0;\n\n  return (\n    <Grid container className={classes.root} justify=\"center\">\n      <Grid item xs={10}>\n        <Paper variant=\"outlined\" elevation={3} className={classes.paper}>\n          <div>\n            <Paper className={classes.dropzone} {...getRootProps()}>\n              <input {...getInputProps()} />\n              {isDragActive ? <p>ファイルをドロップしてください</p> : <p></p>}\n            </Paper>\n            <Button\n              className={classes.upButton}\n              onClick={onUpload}\n              variant=\"outlined\"\n              color=\"primary\"\n              disabled={isDisabledButton}\n            >\n              Upload\n            </Button>\n            <aside>\n              <GridList cellHeight={200} cols={tileCols}>\n                {thumbs}\n              </GridList>\n            </aside>\n          </div>\n        </Paper>\n      </Grid>\n    </Grid>\n  );\n};\nexport default FileUpload;\n","/Users/ueno/dev/repository/react-firebase-storage/src/components/CustomModal.tsx",[],{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"51","replacedBy":"55"},{"ruleId":"53","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":1,"column":27,"nodeType":"59","messageId":"60","endLine":1,"endColumn":36},{"ruleId":"57","severity":1,"message":"61","line":129,"column":11,"nodeType":"59","messageId":"60","endLine":129,"endColumn":17},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],["62"],["63"],"@typescript-eslint/no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'result' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]